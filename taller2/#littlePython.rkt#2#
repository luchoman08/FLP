#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.7 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1
          0 3956 0 28 3 10 #"#lang eopl"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #";*******************************************************************"
 #"***********************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 82
(
 #";;*******************************Equipo de trabajo******************"
 #"**************"
) 0 0 24 29 1 #"\n"
0 0 17 3 37 #";;-> Erik Lopez Pacheco --- 201430406"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";;-> Luis Manrique ---- 201327951"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;-> Jesus Alberto Ramirez ---- 201422554"
0 0 24 29 1 #"\n"
0 0 17 3 84
(
 #";;;;; Interpretador para lenguaje con condicionales, ligadura local,"
 #" procedimientos,"
) 0 0 24 29 1 #"\n"
0 0 17 3 81
(
 #";;;;; procedimientos recursivos, ejecuci\303\263n secuencial y asign"
 #"aci\303\263n de variables"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56
#";; La definici\303\263n BNF para las expresiones del lenguaje:"
0 0 24 29 1 #"\n"
0 0 17 3 2 #";;"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";;  <program>       ::= <expression>"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;                      <a-program (exp)>"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";;  <expression>    ::= <number>"
0 0 24 29 1 #"\n"
0 0 17 3 41 #";;                      <lit-exp (datum)>"
0 0 24 29 1 #"\n"
0 0 17 3 36 #";;                  ::= <identifier>"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";;                      <var-exp (id)>"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";;                  ::= <primitive> ({<expression>}*(,))"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";;                      <primapp-exp (prim rands)>"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";;                  ::= if <expresion> then <expresion> else <expres"
 #"sion>"
) 0 0 24 29 1 #"\n"
0 0 17 3 50 #";;                      <if-exp (exp1 exp2 exp23)>"
0 0 24 29 1 #"\n"
0 0 17 3 74
(
 #";;                  ::= let {<identifier> = <expression>}* in <expre"
 #"ssion>"
) 0 0 24 29 1 #"\n"
0 0 17 3 50 #";;                      <let-exp (ids rands body)>"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";;                  ::= proc({<identificador>}*(,)) <expression>"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;                      <proc-exp (ids body)>"
0 0 24 29 1 #"\n"
0 0 17 3 54 #";;                  ::= (<expression> {<expression>}*)"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;                      <app-exp proc rands>"
0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #";;                  ::= letrec  {identifier ({identifier}*(,)) = <ex"
 #"pression>}* in <expression>"
) 0 0 24 29 1 #"\n"
0 0 17 3 70
(
 #";;                     <letrec-exp(proc-names idss bodies bodyletrec"
 #")>"
) 0 0 24 29 1 #"\n"
0 0 17 3 64
#";;                  ::= begin <expression> {; <expression>}* end"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";;                     <begin-exp (exp exps)>"
0 0 24 29 1 #"\n"
0 0 17 3 55 #";;                  ::= set <identifier> = <expression>"
0 0 24 29 1 #"\n"
0 0 17 3 44 #";;                     <set-exp (id rhsexp)>"
0 0 24 29 1 #"\n"
0 0 17 3 48 #";;  <primitive>     ::= + | - | * | add1 | sub1 "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #";*******************************************************************"
 #"***********************"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 91
(
 #";*******************************************************************"
 #"***********************"
) 0 0 24 29 1 #"\n"
0 0 17 3 24 #";Especificaci\303\263n L\303\251xica"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";<numero-positivo> := <ditigo>* <digito>"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";<numero-negativo> := - <digito>* <digito>"
0 0 24 29 1 #"\n"
0 0 17 3 45 #";<identificador> := (<letra> | <digito> | ?)*"
0 0 24 29 1 #"\n"
0 0 17 3 63
#";<flotante-positivo> := <digito>* <digito> . <digito>* <digito>"
0 0 24 29 1 #"\n"
0 0 17 3 64
#";<flotante-negativo> := - <digito>* <digito> . <digito>* <digito"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";<booleano> := True | False"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 24 29 1 #"\n"
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 8 #"white-sp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"whitespace"
0 0 24 3 2 #") "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"comment"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 19 3 3 #"\"!\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 21 3 9 #"#\\newline"
0 0 24 3 4 #"))) "
0 0 14 3 4 #"skip"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 10 #"identifier"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"letter"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 6 #"letter"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"?\""
0 0 24 3 4 #"))) "
0 0 14 3 6 #"symbol"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"number"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"number"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 19 3 3 #"\"-\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 17 3 49
#";;definici\303\263n de los n\303\272meros decimales positivos"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   (("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #") "
0 0 14 3 5 #"digit"
0 0 24 3 1 #" "
0 0 19 3 3 #"\".\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 4 #") ) "
0 0 14 3 6 #"number"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 6 #"number"
0 0 24 3 1 #" "
0 0 17 3 49
#";;definici\303\263n de los n\303\272meros decimales negativos"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 19 3 3 #"\"-\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #") "
0 0 14 3 5 #"digit"
0 0 24 3 1 #" "
0 0 19 3 3 #"\".\""
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 5 #"digit"
0 0 24 3 3 #")) "
0 0 14 3 6 #"number"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43
#";))Especificaci\303\263n Sint\303\241ctica (gram\303\241tica)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 24 3 2 #"(("
0 0 14 3 7 #"program"
0 0 24 3 2 #" ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 14 3 9 #"a-program"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 6 #"number"
0 0 24 3 2 #") "
0 0 14 3 7 #"lit-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 10 #"identifier"
0 0 24 3 2 #") "
0 0 14 3 7 #"var-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 51 #";(primitive \"(\" (separated-list expression \",\")\")\")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 17 3 14 #"; primapp-exp)"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 19 3 10 #"\"evaluate\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 9 #"primitive"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 8 #"evaluate"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"print\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #"  "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 1 #" "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 14 3 9 #"print-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 66
(
 #";(expression (\"if\" expression \"then\" expression \"else\" express"
 #"ion)"
) 0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 20 #";            if-exp)"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"if\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\":\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"elif"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 2 #"\":"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"end"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 1 24 65 1 #"\t"
0 0 24 3 6 #"      "
0 0 19 3 5 #"\"else"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\":"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"end"
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 14 3 6 #"if-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"let"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"="
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 3 #"\"in"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 7 #"let-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"proc"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"("
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 2 #") "
0 0 19 3 2 #"\")"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 8 #"proc-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 3 #" ( "
0 0 19 3 2 #"\"("
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 2 #"\")"
0 0 19 3 1 #"\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 7 #"app-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"letrec"
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 2 #"\"("
0 0 19 3 1 #"\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"separated-list"
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 2 #"\","
0 0 19 3 1 #"\""
0 0 24 3 2 #") "
0 0 19 3 2 #"\")"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 19 3 2 #"\"="
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 3 #")  "
0 0 19 3 3 #"\"in"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 10 #"letrec-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 30 #"; caracter\303\255sticas adicionales"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"begin"
0 0 19 3 1 #"\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 5 #"arbno"
0 0 24 3 1 #" "
0 0 19 3 3 #"\";\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #") "
0 0 19 3 5 #"\"end\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 15 3 9 #"begin-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"set\""
0 0 24 3 1 #" "
0 0 14 3 10 #"identifier"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"=\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 7 #"set-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"empty\""
0 0 24 3 2 #") "
0 0 14 3 14 #"list-empty-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"cons\""
0 0 24 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\",\""
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 24 3 2 #") "
0 0 14 3 8 #"cons-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 17 3 6 #";;;;;;"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"+\""
0 0 24 3 2 #") "
0 0 14 3 8 #"add-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"-\""
0 0 24 3 2 #") "
0 0 14 3 14 #"substract-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"*\""
0 0 24 3 2 #") "
0 0 14 3 9 #"mult-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"/\""
0 0 24 3 2 #") "
0 0 14 3 8 #"div-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"%\""
0 0 24 3 2 #") "
0 0 14 3 8 #"mod-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\"<\""
0 0 24 3 2 #") "
0 0 14 3 10 #"menor-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 3 #"\">\""
0 0 24 3 2 #") "
0 0 14 3 10 #"mayor-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"<=\""
0 0 24 3 2 #") "
0 0 14 3 18 #"menor-o-igual-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\">=\""
0 0 24 3 2 #") "
0 0 14 3 18 #"mayor-o-igual-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"==\""
0 0 24 3 2 #") "
0 0 14 3 13 #"igualdad-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"!=\""
0 0 24 3 2 #") "
0 0 14 3 14 #"diferente-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"and\""
0 0 24 3 2 #") "
0 0 14 3 8 #"and-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 4 #"\"or\""
0 0 24 3 2 #") "
0 0 14 3 7 #"or-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 5 #"\"not\""
0 0 24 3 2 #") "
0 0 14 3 8 #"not-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"add1\""
0 0 24 3 2 #") "
0 0 14 3 9 #"incr-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"sub1\""
0 0 24 3 2 #") "
0 0 14 3 9 #"decr-prim"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"boolean"
0 0 24 3 2 #" ("
0 0 19 3 6 #"\"True\""
0 0 24 3 2 #") "
0 0 14 3 9 #"bool-true"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"boolean"
0 0 24 3 2 #" ("
0 0 19 3 7 #"\"False\""
0 0 24 3 2 #") "
0 0 14 3 10 #"bool-false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 59
#";Tipos de datos para la sintaxis abstracta de la gram\303\241tica"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";Construidos manualmente:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";(define-datatype program program?"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";  (a-program"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";   (exp expression?)))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";(define-datatype expression expression?"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";  (lit-exp"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";   (datum number?))"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";  (var-exp"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";   (id symbol?))"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";  (primapp-exp"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";   (prim primitive?)"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";   (rands (list-of expression?)))"
0 0 24 29 1 #"\n"
0 0 17 3 10 #";  (if-exp"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";   (test-exp expression?)"
0 0 24 29 1 #"\n"
0 0 17 3 26 #";   (true-exp expression?)"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";   (false-exp expression?))"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";  (let-exp"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";   (ids (list-of symbol?))"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";   (rans (list-of expression?))"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";   (body expression?))"
0 0 24 29 1 #"\n"
0 0 17 3 12 #";  (proc-exp"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";   (ids (list-of symbol?))"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";   (body expression?))"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";  (app-exp"
0 0 24 29 1 #"\n"
0 0 17 3 22 #";   (proc expression?)"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";   (args (list-of expression?)))"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";  (letrec-exp"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";   (proc-names (list-of symbol?))"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";   (idss (list-of (list-of symbol?)))"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";   (bodies (list-of expression?))"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";   (body-letrec expression?))"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";  (begin-exp"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";   (exp expression?)"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";   (exps (list-of expression?)))"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";  (set-exp"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";   (id symbol?)"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";   (rhs expression?)))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";(define-datatype primitive primitive?"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";  (add-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";  (substract-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";  (mult-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";  (incr-prim)"
0 0 24 29 1 #"\n"
0 0 17 3 15 #";  (decr-prim))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";Construidos autom\303\241ticamente:"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 28 #"sllgen:make-define-datatypes"
0 0 24 3 1 #" "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 24 3 1 #" "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"show-the-datatypes"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 14 3 28 #"sllgen:list-define-datatypes"
0 0 24 3 1 #" "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 24 3 1 #" "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 26 #";Parser, Scanner, Interfaz"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";El FrontEnd (An\303\241lisis l\303\251xico (scanner) y sint\303\241"
 #"ctico (parser) integrados)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"scan&parse"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 25 #"sllgen:make-string-parser"
0 0 24 3 1 #" "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 24 3 1 #" "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";El Analizador L\303\251xico (Scanner)"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"just-scan"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 26 #"sllgen:make-string-scanner"
0 0 24 3 1 #" "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 24 3 1 #" "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
(
 #";El Interpretador (FrontEnd + Evaluaci\303\263n + se\303\261al para "
 #"lectura )"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"interpretador"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 20 #"sllgen:make-rep-loop"
0 0 24 3 2 #"  "
0 0 19 3 6 #"\"--> \""
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pgm"
0 0 24 3 3 #") ("
0 0 14 3 12 #"eval-program"
0 0 24 3 2 #"  "
0 0 14 3 3 #"pgm"
0 0 24 3 3 #")) "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 25 #"sllgen:make-stream-parser"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 31 #"scanner-spec-simple-interpreter"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 26 #"grammar-simple-interpreter"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 14 #";El Interprete"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 35 #";eval-program: <programa> -> numero"
0 0 24 29 1 #"\n"
0 0 17 3 106
(
 #"; funci\303\263n que eval\303\272a un programa teniendo en cuenta un"
 #" ambiente dado (se inicializa dentro del programa)"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"eval-program"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pgm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"a-program"
0 0 24 3 2 #" ("
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 8 #"init-env"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 18 #"; Ambiente inicial"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";(define init-env"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";  (lambda ()"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";    (extend-env"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";     '(x y z)"
0 0 24 29 1 #"\n"
0 0 17 3 14 #";     '(4 2 5)"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";     (empty-env))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"init-env"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"extend-env"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 14 3 1 #"i"
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 9 #"empty-env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";(define init-env"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";  (lambda ()"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";    (extend-env"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";     '(x y z f)"
0 0 24 29 1 #"\n"
0 0 17 3 136
(
 #";     (list 4 2 5 (closure '(y) (primapp-exp (mult-prim) (cons (var-"
 #"exp 'y) (cons (primapp-exp (decr-prim) (cons (var-exp 'y) ())) ())))"
) 0 0 24 29 1 #"\n"
0 0 17 3 36 #";                      (empty-env)))"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";     (empty-env))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 53 #";eval-expression: <expression> <enviroment> -> numero"
0 0 24 29 1 #"\n"
0 0 17 3 48 #"; evalua la expresi\303\263n en el ambiente de entrada"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"eval-expression"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"lit-exp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"datum"
0 0 24 3 2 #") "
0 0 14 3 5 #"datum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"var-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 3 #") ("
0 0 14 3 9 #"apply-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"evaluate"
0 0 24 3 2 #" ("
0 0 14 3 5 #"exp-1"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 5 #"exp-2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ("
0 0 14 3 16 #"evaluar-evaluate"
0 0 24 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 24 3 1 #" "
0 0 14 3 5 #"exp-1"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 5 #"exp-2"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"if-exp"
0 0 24 3 2 #" ("
0 0 14 3 15 #"test-expression"
0 0 24 3 1 #" "
0 0 14 3 21 #"true-expression-first"
0 0 24 3 1 #" "
0 0 14 3 21 #"true-expressions-rest"
0 0 24 3 1 #" "
0 0 14 3 20 #"elif-test-expression"
0 0 24 3 1 #" "
0 0 14 3 16 #"elif-expressions"
0 0 24 3 1 #" "
0 0 14 3 17 #"false-expressions"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 11 #"true-value?"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 15 #"test-expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 21 #"true-expression-first"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 21 #"true-expression-first"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"print-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"   "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"let-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 5 #"rands"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-rands"
0 0 24 3 1 #" "
0 0 14 3 5 #"rands"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 10 #"extend-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"proc-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 7 #"closure"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"app-exp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"rator"
0 0 24 3 1 #" "
0 0 14 3 5 #"rands"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 4 #"proc"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 5 #"rator"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 4 #"args"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eval-rands"
0 0 24 3 1 #" "
0 0 14 3 5 #"rands"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"procval?"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 15 #"apply-procedure"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 15 #"eval-expression"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                 "
0 0 19 3 35 #"\"Attempt to apply non-procedure ~s\""
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"letrec-exp"
0 0 24 3 2 #" ("
0 0 14 3 10 #"proc-names"
0 0 24 3 1 #" "
0 0 14 3 4 #"idss"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 1 #" "
0 0 14 3 11 #"letrec-body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 11 #"letrec-body"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 22 #"extend-env-recursively"
0 0 24 3 1 #" "
0 0 14 3 10 #"proc-names"
0 0 24 3 1 #" "
0 0 14 3 4 #"idss"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"set-exp"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"rhs-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 7 #"setref!"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 7 #"rhs-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 9 #"begin-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 4 #"loop"
0 0 24 3 3 #" (("
0 0 14 3 3 #"acc"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 4 #"exps"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 3 #"acc"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"loop"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                               "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 14 #"list-empty-exp"
0 0 24 3 3 #"() "
0 0 14 3 5 #"empty"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"cons-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"lis"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"lis"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 75
(
 #"; funciones auxiliares para aplicar eval-expression a cada elemento "
 #"de una "
) 0 0 24 29 1 #"\n"
0 0 17 3 34 #"; lista de operandos (expresiones)"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"eval-rands"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"rands"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 3 #") ("
0 0 14 3 9 #"eval-rand"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 5 #"rands"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 17 3 62
#"; reordena una estructura evaluate de acuerdo a la precedencia"
0 0 24 29 1 #"\n"
0 0 17 3 53 #"; evaluate-struct -> evaluate-struct-precedence-order"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"ordenar-evaluate"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 9 #"a-program"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 8 #"evaluate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 2 #") "
0 0 19 3 11 #"\"hola mudo\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 19 3 20 #"\" no es un evaluate\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"que mira prro >:v\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             )"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #"; extraer evaluates con modulos de un e"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"eval-rand"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rand"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"rand"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 60
#";apply-primitive: <primitiva> <list-of-expression> -> numero"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"apply-primitive"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"primitive"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"add-prim"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 14 #"substract-prim"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"mod-prim"
0 0 24 3 5 #" () ("
0 0 14 3 6 #"modulo"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"mult-prim"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"div-prim"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"incr-prim"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"decr-prim"
0 0 24 3 5 #" () ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"menor-prim"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"bool-true"
0 0 24 3 3 #") ("
0 0 14 3 10 #"bool-false"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"mayor-prim"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"bool-true"
0 0 24 3 3 #") ("
0 0 14 3 10 #"bool-false"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 18 #"menor-o-igual-prim"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"<="
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"bool-true"
0 0 24 3 3 #") ("
0 0 14 3 10 #"bool-false"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 18 #"mayor-o-igual-prim"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"bool-true"
0 0 24 3 3 #") ("
0 0 14 3 10 #"bool-false"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"igualdad-prim"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"bool-true"
0 0 24 3 3 #") ("
0 0 14 3 10 #"bool-false"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 14 #"diferente-prim"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 5 #"))) ("
0 0 14 3 9 #"bool-true"
0 0 24 3 3 #") ("
0 0 14 3 10 #"bool-false"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"and-prim"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"bool-true"
0 0 24 3 3 #") ("
0 0 14 3 10 #"bool-false"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"or-prim"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"bool-true"
0 0 24 3 3 #") ("
0 0 14 3 10 #"bool-false"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"not-prim"
0 0 24 3 5 #" () ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 4 #")) ("
0 0 14 3 9 #"bool-true"
0 0 24 3 3 #") ("
0 0 14 3 10 #"bool-false"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"      )))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 90
(
 #";true-value?: determina si un valor dado corresponde a un valor bool"
 #"eano falso o verdadero"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"true-value?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"x"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 1 #"x"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 15 #";Procedimientos"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 7 #"procval"
0 0 24 3 1 #" "
0 0 14 3 8 #"procval?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"closure"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"ids"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 96
(
 #";apply-procedure: evalua el cuerpo de un procedimientos en el ambien"
 #"te extendido correspondiente"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"apply-procedure"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"procval"
0 0 24 3 1 #" "
0 0 14 3 4 #"proc"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"closure"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 2 #" ("
0 0 14 3 10 #"extend-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 10 #";Ambientes"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 38 #";definici\303\263n del tipo de dato ambiente"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 16 #"empty-env-record"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"extended-env-record"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"syms"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 7 #"vector?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"scheme-value?"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";empty-env:      -> enviroment"
0 0 24 29 1 #"\n"
0 0 17 3 37 #";funci\303\263n que crea un ambiente vac\303\255o"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"empty-env"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 16 #"empty-env-record"
0 0 24 3 10 #")))       "
0 0 17 3 43 #";llamado al constructor de ambiente vac\303\255o "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";extend-env: <list-of symbols> <list-of numbers> enviroment -> envir"
 #"oment"
) 0 0 24 29 1 #"\n"
0 0 17 3 40 #";funci\303\263n que crea un ambiente extendido"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"extend-env"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 19 #"extended-env-record"
0 0 24 3 1 #" "
0 0 14 3 4 #"syms"
0 0 24 3 2 #" ("
0 0 14 3 12 #"list->vector"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 119
(
 #";extend-env-recursively: <list-of symbols> <list-of <list-of symbols"
 #">> <list-of expressions> environment -> environment"
) 0 0 24 29 1 #"\n"
0 0 17 3 71
(
 #";funci\303\263n que crea un ambiente extendido para procedimientos r"
 #"ecursivos"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"extend-env-recursively"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"proc-names"
0 0 24 3 1 #" "
0 0 14 3 4 #"idss"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 1 #" "
0 0 14 3 7 #"old-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"len"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 10 #"proc-names"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"vec"
0 0 24 3 2 #" ("
0 0 14 3 11 #"make-vector"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"env"
0 0 24 3 2 #" ("
0 0 14 3 19 #"extended-env-record"
0 0 24 3 1 #" "
0 0 14 3 10 #"proc-names"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 7 #"old-env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"for-each"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 7 #"closure"
0 0 24 3 1 #" "
0 0 14 3 3 #"ids"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"iota"
0 0 24 3 1 #" "
0 0 14 3 3 #"len"
0 0 24 3 2 #") "
0 0 14 3 4 #"idss"
0 0 24 3 1 #" "
0 0 14 3 6 #"bodies"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";iota: number -> list"
0 0 24 29 1 #"\n"
0 0 17 3 65
(
 #";funci\303\263n que retorna una lista de los n\303\272meros desde 0 "
 #"hasta end"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"iota"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"end"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 1 #" "
0 0 14 3 4 #"loop"
0 0 24 3 3 #" (("
0 0 14 3 4 #"next"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #">="
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 1 #" "
0 0 14 3 3 #"end"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 2 #" ("
0 0 14 3 4 #"loop"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 4 #"next"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #";(define iota"
0 0 24 29 1 #"\n"
0 0 17 3 16 #";  (lambda (end)"
0 0 24 29 1 #"\n"
0 0 17 3 23 #";    (iota-aux 0 end)))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 0 24 29 1 #"\n"
0 0 17 3 17 #";(define iota-aux"
0 0 24 29 1 #"\n"
0 0 17 3 20 #";  (lambda (ini fin)"
0 0 24 29 1 #"\n"
0 0 17 3 21 #";    (if (>= ini fin)"
0 0 24 29 1 #"\n"
0 0 17 3 11 #";        ()"
0 0 24 29 1 #"\n"
0 0 17 3 47 #";        (cons ini (iota-aux (+ 1 ini) fin)))))"
0 0 24 29 1 #"\n"
0 0 17 3 27 #";(bool-true) (bool-false)))"
0 0 24 29 1 #"\n"
0 0 17 3 46
#";funci\303\263n que busca un s\303\255mbolo en un ambiente"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"apply-env"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 5 #"deref"
0 0 24 3 2 #" ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"apply-env-ref"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 16 #"empty-env-record"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"No binding for ~s\""
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 19 #"extended-env-record"
0 0 24 3 2 #" ("
0 0 14 3 4 #"syms"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 3 #"pos"
0 0 24 3 2 #" ("
0 0 14 3 17 #"rib-find-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 4 #"syms"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 30 #"                             ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 5 #"a-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 13 #"apply-env-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";*******************************************************************"
 #"************************"
) 0 0 24 29 1 #"\n"
0 0 17 3 12 #";Referencias"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 9 #"reference"
0 0 24 3 1 #" "
0 0 14 3 10 #"reference?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 5 #"a-ref"
0 0 24 3 2 #" ("
0 0 14 3 8 #"position"
0 0 24 3 1 #" "
0 0 14 3 8 #"integer?"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 7 #"vector?"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"deref"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 15 #"primitive-deref"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"primitive-deref"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"reference"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"a-ref"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 10 #"vector-ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"setref!"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 17 #"primitive-setref!"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"primitive-setref!"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"reference"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"a-ref"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 3 #"vec"
0 0 24 3 1 #" "
0 0 14 3 3 #"pos"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 89
(
 #";*******************************************************************"
 #"*********************"
) 0 0 24 29 1 #"\n"
0 0 17 3 21 #";Funciones Auxiliares"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 65
(
 #"; funciones auxiliares para encontrar la posici\303\263n de un s\303"
 #"\255mbolo"
) 0 0 24 29 1 #"\n"
0 0 17 3 41 #"; en la lista de s\303\255mbolos de un ambiente"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"rib-find-position"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 3 #"los"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 18 #"list-find-position"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 3 #"los"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"list-find-position"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"sym"
0 0 24 3 1 #" "
0 0 14 3 3 #"los"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"list-index"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sym1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 4 #"sym1"
0 0 24 3 1 #" "
0 0 14 3 3 #"sym"
0 0 24 3 3 #")) "
0 0 14 3 3 #"los"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"list-index"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pred"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      (("
0 0 14 3 4 #"pred"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 12 #"list-index-r"
0 0 24 3 2 #" ("
0 0 14 3 10 #"list-index"
0 0 24 3 1 #" "
0 0 14 3 4 #"pred"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 2 #"ls"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 7 #"number?"
0 0 24 3 1 #" "
0 0 14 3 12 #"list-index-r"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 12 #"list-index-r"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 21 3 2 #"#f"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 78
(
 #";Funcion que convierte una s-list de cualquier tipo y profundidad en"
 #" una lista"
) 0 0 24 29 1 #"\n"
0 0 17 3 12 #";slist->list"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 21 #"extraer-valores-slist"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"s-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"s-list"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 24 3 5 #"())  "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                      (("
0 0 14 3 5 #"list?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"s-list"
0 0 24 3 4 #")) ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 21 #"extraer-valores-slist"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"s-list"
0 0 24 3 4 #")) ("
0 0 14 3 21 #"extraer-valores-slist"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"s-list"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"s-list"
0 0 24 3 3 #") ("
0 0 14 3 21 #"extraer-valores-slist"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"s-list"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      )"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 17 3 127
(
 #";Funcion que convierte un programa en una lista de estructuras (solo"
 #" si el programa es evaluate) haciendo las veces de unparser"
) 0 0 24 29 1 #"\n"
0 0 17 3 16 #";program->slist "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"unparse-program"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"prog"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"a-program"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 5 #")   ("
0 0 14 3 16 #"unparse-evaluate"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 114
(
 #";Funcion que convierte una estructura evaluate en una s-list de prog"
 #"ramas y primitivas sin importar su profundidad"
) 0 0 24 29 1 #"\n"
0 0 17 3 32 #";evaluate-exp->slist-expressions"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"unparse-evaluate"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 14 3 8 #"evaluate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 16 #"unparse-evaluate"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 3 #")  "
0 0 14 3 4 #"prim"
0 0 24 3 2 #" ("
0 0 14 3 16 #"unparse-evaluate"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"else"
0 0 24 3 2 #"  "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   )"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 17 3 19 #";evaluate-exp->list"
0 0 24 29 1 #"\n"
0 0 17 3 33 #";(define unparse-evaluate-to-list"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 1 17 65 1 #"\t"
0 0 17 3 14 #"(lambda (prog)"
0 0 24 29 1 #"\n"
0 0 17 3 1 #";"
0 1 17 65 1 #"\t"
0 0 17 3 49 #" (extraer-valores-slist (unparse-program prog))))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"unparse-evaluate-to-list"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"prog"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 21 #"extraer-valores-slist"
0 0 24 3 2 #" ("
0 0 14 3 16 #"unparse-evaluate"
0 0 24 3 1 #" "
0 0 14 3 4 #"prog"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 17 3 92
(
 #";Funcion que evalua la primera operacion existente en una lista de e"
 #"xpresiones y operaciones"
) 0 0 24 29 1 #"\n"
0 0 17 3 125
(
 #";ejemplo: (evaluar-prim (list prog-a + 5 * 8 - 9)) = (eval-prog prog"
 #"-a) + 5 = 9 suponiendo que a evaluado de como resultado 4"
) 0 0 24 29 1 #"\n"
0 0 17 3 27 #";lista-operaciones->lit-exp"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"evaluar-prim"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 7 #"lit-exp"
0 0 24 3 2 #" ("
0 0 14 3 15 #"apply-primitive"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #"("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #"("
0 0 14 3 5 #"caddr"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 17 3 132
(
 #";Funcion que evalua todas las operaciones de modulo existentes en un"
 #"a lista de programas y expresiones y retorna la lista resultante"
) 0 0 24 29 1 #"\n"
0 0 17 3 73
(
 #";ejemplo: (evaluar-mod (list prog-a + 5 % 3 - 9)) = (list prog-a + 2"
 #" - 9)"
) 0 0 24 29 1 #"\n"
0 0 17 3 37 #";lista-operaciones->lista-operaciones"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"evaluar-mod"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #")  "
0 0 14 3 17 #"lista-expresiones"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"mod-prim"
0 0 24 3 6 #" ()  ("
0 0 14 3 11 #"evaluar-mod"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"evaluar-prim"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 5 #"cdddr"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 5 #"))  ("
0 0 14 3 11 #"evaluar-mod"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 154
(
 #";Funcion que evalua todas las operaciones de division y multiplicaci"
 #"on  existentes en una lista de expreciones y operaciones y retorna l"
 #"a lista resultante"
) 0 0 24 29 1 #"\n"
0 0 17 3 106
(
 #";ejemplo: (evaluar-division-multiplicacion (list prog-a + 4 * 8 + 5 "
 #"- 9 / 9)) = (list prog-a + 48 + 5 - 1)"
) 0 0 24 29 1 #"\n"
0 0 17 3 37 #";lista-operaciones->lista-operaciones"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 31 #"evaluar-division-multiplicacion"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #")  "
0 0 14 3 17 #"lista-expresiones"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 9 #"mult-prim"
0 0 24 3 6 #" ()  ("
0 0 14 3 31 #"evaluar-division-multiplicacion"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"evaluar-prim"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 5 #"cdddr"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 8 #"div-prim"
0 0 24 3 6 #" ()  ("
0 0 14 3 31 #"evaluar-division-multiplicacion"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"evaluar-prim"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 5 #"cdddr"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 5 #"))  ("
0 0 14 3 31 #"evaluar-division-multiplicacion"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 142
(
 #";Funcion que evalua todas las operaciones de suma  y resta  existent"
 #"es en una lista de expreciones y operaciones y retorna la lista resu"
 #"ltante"
) 0 0 24 29 1 #"\n"
0 0 17 3 77
(
 #";ejemplo: (evaluar-suma-resta (list prog-a + 4 + 8 - 1)) = (list pro"
 #"g-a + 11)"
) 0 0 24 29 1 #"\n"
0 0 17 3 37 #";lista-operaciones->lista-operaciones"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"evaluar-suma-resta"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #")  "
0 0 14 3 17 #"lista-expresiones"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"add-prim"
0 0 24 3 6 #" ()  ("
0 0 14 3 18 #"evaluar-suma-resta"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"evaluar-prim"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 5 #"cdddr"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 14 #"substract-prim"
0 0 24 3 6 #" ()  ("
0 0 14 3 18 #"evaluar-suma-resta"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 12 #"evaluar-prim"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 5 #"cdddr"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 3 #"  ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 5 #"))  ("
0 0 14 3 18 #"evaluar-suma-resta"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 17 #"lista-expresiones"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 4 #" )))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 183
(
 #";; Funcion que devuelve un valor numerico (0, 1 o 2) dependiendo de "
 #"si la lista de operaciones primitivas contiene operaciones matematic"
 #"as (1) o logicas (2) o una combinacion de estas"
) 0 0 24 29 1 #"\n"
0 0 17 3 57 #";; caso en el cual el evaluate es incorrecto  y retorna 0"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";; lista-operaciones-primitivas -> integer"
0 0 24 29 1 #"\n"
0 0 17 3 29 #";; el valor por defecto es -1"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"tipo-lista-operaciones"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"lista-op"
0 0 24 3 1 #" "
0 0 14 3 27 #"num-operaciones-matematicas"
0 0 24 3 1 #" "
0 0 14 3 23 #"num-operaciones-logicas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 8 #"lista-op"
0 0 24 3 3 #" ) "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 1 24 65 1 #"\t"
0 0 24 3 3 #" (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 23 #"num-operaciones-logicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 27 #"num-operaciones-matematicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #"  "
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #" (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 23 #"num-operaciones-logicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 27 #"num-operaciones-matematicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #" (("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 27 #"num-operaciones-matematicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #") ("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 23 #"num-operaciones-logicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 3 #")) "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"primitive"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 8 #"lista-op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"add-prim"
0 0 24 3 5 #" () ("
0 0 14 3 22 #"tipo-lista-operaciones"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 8 #"lista-op"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 27 #"num-operaciones-matematicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 23 #"num-operaciones-logicas"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 14 #"substract-prim"
0 0 24 3 5 #" () ("
0 0 14 3 22 #"tipo-lista-operaciones"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 8 #"lista-op"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 27 #"num-operaciones-matematicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 23 #"num-operaciones-logicas"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 9 #"mult-prim"
0 0 24 3 5 #" () ("
0 0 14 3 22 #"tipo-lista-operaciones"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 8 #"lista-op"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 27 #"num-operaciones-matematicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 23 #"num-operaciones-logicas"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"div-prim"
0 0 24 3 5 #" () ("
0 0 14 3 22 #"tipo-lista-operaciones"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 8 #"lista-op"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 27 #"num-operaciones-matematicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 23 #"num-operaciones-logicas"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"mod-prim"
0 0 24 3 5 #" () ("
0 0 14 3 22 #"tipo-lista-operaciones"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 8 #"lista-op"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 27 #"num-operaciones-matematicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 23 #"num-operaciones-logicas"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 9 #"incr-prim"
0 0 24 3 5 #" () ("
0 0 14 3 22 #"tipo-lista-operaciones"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 8 #"lista-op"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 27 #"num-operaciones-matematicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 23 #"num-operaciones-logicas"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 9 #"decr-prim"
0 0 24 3 5 #" () ("
0 0 14 3 22 #"tipo-lista-operaciones"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 8 #"lista-op"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 27 #"num-operaciones-matematicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 14 3 23 #"num-operaciones-logicas"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"menor-prim"
0 0 24 3 5 #" () ("
0 0 14 3 22 #"tipo-lista-operaciones"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 8 #"lista-op"
0 0 24 3 2 #") "
0 0 14 3 27 #"num-operaciones-matematicas"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 23 #"num-operaciones-logicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 10 #"mayor-prim"
0 0 24 3 5 #" () ("
0 0 14 3 22 #"tipo-lista-operaciones"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 8 #"lista-op"
0 0 24 3 2 #") "
0 0 14 3 27 #"num-operaciones-matematicas"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 23 #"num-operaciones-logicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 18 #"menor-o-igual-prim"
0 0 24 3 5 #" () ("
0 0 14 3 22 #"tipo-lista-operaciones"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 8 #"lista-op"
0 0 24 3 2 #") "
0 0 14 3 27 #"num-operaciones-matematicas"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 23 #"num-operaciones-logicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 18 #"mayor-o-igual-prim"
0 0 24 3 5 #" () ("
0 0 14 3 22 #"tipo-lista-operaciones"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 8 #"lista-op"
0 0 24 3 2 #") "
0 0 14 3 27 #"num-operaciones-matematicas"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 23 #"num-operaciones-logicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 13 #"igualdad-prim"
0 0 24 3 5 #" () ("
0 0 14 3 22 #"tipo-lista-operaciones"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 8 #"lista-op"
0 0 24 3 2 #") "
0 0 14 3 27 #"num-operaciones-matematicas"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 23 #"num-operaciones-logicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 14 #"diferente-prim"
0 0 24 3 5 #" () ("
0 0 14 3 22 #"tipo-lista-operaciones"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 8 #"lista-op"
0 0 24 3 2 #") "
0 0 14 3 27 #"num-operaciones-matematicas"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 23 #"num-operaciones-logicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"and-prim"
0 0 24 3 5 #" () ("
0 0 14 3 22 #"tipo-lista-operaciones"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 8 #"lista-op"
0 0 24 3 2 #") "
0 0 14 3 27 #"num-operaciones-matematicas"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 23 #"num-operaciones-logicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 7 #"or-prim"
0 0 24 3 5 #" () ("
0 0 14 3 22 #"tipo-lista-operaciones"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 8 #"lista-op"
0 0 24 3 2 #") "
0 0 14 3 27 #"num-operaciones-matematicas"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 23 #"num-operaciones-logicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 8 #"not-prim"
0 0 24 3 5 #" () ("
0 0 14 3 22 #"tipo-lista-operaciones"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 24 3 1 #" "
0 0 14 3 8 #"lista-op"
0 0 24 3 2 #") "
0 0 14 3 27 #"num-operaciones-matematicas"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 23 #"num-operaciones-logicas"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 17 3 149
(
 #"; Funcion que recive una expresion evaluate y retorna el valor resul"
 #"tante ademas de intentar validar su sintaxis, no se manejan todas la"
 #"s excepciones"
) 0 0 24 29 1 #"\n"
0 0 17 3 131
(
 #"; aunque se intento, por ejemplo si se digita evaluate 3 + evaluate "
 #"1 < 2 se encuentra un error no controlado, pero se asegura que "
) 0 0 24 29 1 #"\n"
0 0 17 3 126
(
 #"; todas las expresiones que tengan logica sintactica se evaluaran y "
 #"se retornara su respectivo resultado, ademas de garantizar"
) 0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #"; que la precedencia de operadores en el siguiente orden de mayor a "
 #"menor: (% * / + -)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"evaluar-evaluate"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"eval-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 22 #"tipo-lista-operaciones"
0 0 24 3 2 #" ("
0 0 14 3 24 #"unparse-evaluate-to-list"
0 0 24 3 1 #" "
0 0 14 3 8 #"eval-exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 2 #" ("
0 0 14 3 18 #"evaluar-suma-resta"
0 0 24 3 2 #" ("
0 0 14 3 31 #"evaluar-division-multiplicacion"
0 0 24 3 2 #" ("
0 0 14 3 11 #"evaluar-mod"
0 0 24 3 2 #" ("
0 0 14 3 24 #"unparse-evaluate-to-list"
0 0 24 3 1 #" "
0 0 14 3 8 #"eval-exp"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"lit-exp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"numero"
0 0 24 3 2 #") "
0 0 14 3 6 #"numero"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"algo anda mal muy mal\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"  ))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"(("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 22 #"tipo-lista-operaciones"
0 0 24 3 1 #"("
0 0 14 3 24 #"unparse-evaluate-to-list"
0 0 24 3 1 #" "
0 0 14 3 8 #"eval-exp"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 8 #"eval-exp"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"evaluate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 15 #"apply-primitive"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"algo anda mal muy mal\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 1 24 65 1 #"\t"
0 0 24 3 2 #" ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 8 #"eval-exp"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 3 #"  ("
0 0 14 3 8 #"evaluate"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 15 #"apply-primitive"
0 0 24 3 1 #" "
0 0 14 3 4 #"prim"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 15 #"eval-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 1 24 65 1 #"\t"
0 0 24 3 4 #"   ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 19 3 23 #"\"algo anda mal muy mal\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 105
(
 #";(evaluar-mod(unparse-evaluate-to-list (scan&parse \"evaluate 4 % ev"
 #"aluate 5 + evaluate 2 - 1\")) init-env)"
) 0 0 24 29 1 #"\n"
0 0 17 3 121
(
 #"; (display  (unparse-evaluate-to-list (scan&parse\"evaluate evaluate"
 #" 6 - 1 % evaluate 5 + evaluate 2 - evaluate 5 * 3\")) )"
) 0 0 24 29 1 #"\n"
0 0 17 3 11 #"; (newline)"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; (newline)"
0 0 24 29 1 #"\n"
0 0 17 3 143
(
 #"; (display (evaluar-mod (unparse-evaluate-to-list (scan&parse \"eval"
 #"uate evaluate 6 - 1 % evaluate 5 + evaluate 2 - evaluate 5 * 3\")) i"
 #"nit-env))"
) 0 0 24 29 1 #"\n"
0 0 17 3 11 #"; (newline)"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; (newline)"
0 0 24 29 1 #"\n"
0 0 17 3 186
(
 #"; (display (evaluar-division-multiplicacion (evaluar-mod (unparse-ev"
 #"aluate-to-list (scan&parse \"evaluate evaluate 6 - 1 % evaluate 5 + "
 #"evaluate 2 - evaluate 5 * 3\")) init-env) init-env))"
) 0 0 24 29 1 #"\n"
0 0 17 3 11 #"; (newline)"
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; (newline)"
0 0 24 29 1 #"\n"
0 0 17 3 233
(
 #"; (display (evaluar-suma-resta  (evaluar-division-multiplicacion (ev"
 #"aluar-mod (unparse-evaluate-to-list (scan&parse \"evaluate evaluate "
 #"if 1 then 4 else 4 - 1 % evaluate 5 + evaluate 2 - evaluate 5 * 3\")"
 #") init-env) init-env)init-env))"
) 0 0 24 29 1 #"\n"
0 0 17 3 2 #"; "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 13 #"interpretador"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
