!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
apply-env	interpretadorClase.rkt	/^(define apply-env$/;"	f
apply-env	littlePython.rkt	/^(define apply-env$/;"	f
apply-env	littlePython2.rkt	/^(define apply-env$/;"	f
apply-env-ref	interpretadorClase.rkt	/^(define apply-env-ref$/;"	f
apply-env-ref	littlePython.rkt	/^(define apply-env-ref$/;"	f
apply-env-ref	littlePython2.rkt	/^(define apply-env-ref$/;"	f
apply-primitive	interpretadorClase.rkt	/^(define apply-primitive$/;"	f
apply-primitive	littlePython.rkt	/^(define apply-primitive$/;"	f
apply-primitive	littlePython2.rkt	/^(define apply-primitive$/;"	f
apply-procedure	interpretadorClase.rkt	/^(define apply-procedure$/;"	f
apply-procedure	littlePython.rkt	/^(define apply-procedure$/;"	f
apply-procedure	littlePython2.rkt	/^(define apply-procedure$/;"	f
caso1	interpretadorClase.rkt	/^(define caso1 (primapp-exp (incr-prim) (list (lit-exp 5))))$/;"	f
caso1	littlePython2.rkt	/^(define caso1 (primapp-exp (incr-prim) (list (lit-exp 5))))$/;"	f
deref	interpretadorClase.rkt	/^(define deref$/;"	f
deref	littlePython.rkt	/^(define deref$/;"	f
deref	littlePython2.rkt	/^(define deref$/;"	f
empty-env	interpretadorClase.rkt	/^(define empty-env  $/;"	f
empty-env	littlePython.rkt	/^(define empty-env  $/;"	f
empty-env	littlePython2.rkt	/^(define empty-env  $/;"	f
environment	interpretadorClase.rkt	/^(define-datatype environment environment?$/;"	f
environment	littlePython.rkt	/^(define-datatype environment environment?$/;"	f
environment	littlePython2.rkt	/^(define-datatype environment environment?$/;"	f
eval-expression	interpretadorClase.rkt	/^(define eval-expression$/;"	f
eval-expression	littlePython.rkt	/^(define eval-expression$/;"	f
eval-expression	littlePython2.rkt	/^(define eval-expression$/;"	f
eval-program	interpretadorClase.rkt	/^(define eval-program$/;"	f
eval-program	littlePython.rkt	/^(define eval-program$/;"	f
eval-program	littlePython2.rkt	/^(define eval-program$/;"	f
eval-rand	interpretadorClase.rkt	/^(define eval-rand$/;"	f
eval-rand	littlePython.rkt	/^(define eval-rand$/;"	f
eval-rand	littlePython2.rkt	/^(define eval-rand$/;"	f
eval-rands	interpretadorClase.rkt	/^(define eval-rands$/;"	f
eval-rands	littlePython.rkt	/^(define eval-rands$/;"	f
eval-rands	littlePython2.rkt	/^(define eval-rands$/;"	f
exp-app	interpretadorClase.rkt	/^(define exp-app (primapp-exp (add-prim) (list exp-numero exp-ident)))$/;"	f
exp-app	littlePython2.rkt	/^(define exp-app (primapp-exp (add-prim) (list exp-numero exp-ident)))$/;"	f
exp-ident	interpretadorClase.rkt	/^(define exp-ident (var-exp 'c))$/;"	f
exp-ident	littlePython2.rkt	/^(define exp-ident (var-exp 'c))$/;"	f
exp-numero	interpretadorClase.rkt	/^(define exp-numero (lit-exp 8))$/;"	f
exp-numero	littlePython2.rkt	/^(define exp-numero (lit-exp 8))$/;"	f
extend-env	interpretadorClase.rkt	/^(define extend-env$/;"	f
extend-env	littlePython.rkt	/^(define extend-env$/;"	f
extend-env	littlePython2.rkt	/^(define extend-env$/;"	f
extend-env-recursively	interpretadorClase.rkt	/^(define extend-env-recursively$/;"	f
extend-env-recursively	littlePython.rkt	/^(define extend-env-recursively$/;"	f
extend-env-recursively	littlePython2.rkt	/^(define extend-env-recursively$/;"	f
grammar-simple-interpreter	interpretadorClase.rkt	/^(define grammar-simple-interpreter$/;"	f
grammar-simple-interpreter	littlePython.rkt	/^(define grammar-simple-interpreter$/;"	f
grammar-simple-interpreter	littlePython2.rkt	/^(define grammar-simple-interpreter$/;"	f
init-env	interpretadorClase.rkt	/^(define init-env$/;"	f
init-env	littlePython.rkt	/^(define init-env$/;"	f
init-env	littlePython2.rkt	/^(define init-env$/;"	f
interpretador	interpretadorClase.rkt	/^(define interpretador$/;"	f
interpretador	littlePython.rkt	/^(define interpretador$/;"	f
interpretador	littlePython2.rkt	/^(define interpretador$/;"	f
iota	interpretadorClase.rkt	/^(define iota$/;"	f
iota	littlePython.rkt	/^(define iota$/;"	f
iota	littlePython2.rkt	/^(define iota$/;"	f
just-scan	interpretadorClase.rkt	/^(define just-scan$/;"	f
just-scan	littlePython.rkt	/^(define just-scan$/;"	f
just-scan	littlePython2.rkt	/^(define just-scan$/;"	f
list-find-position	interpretadorClase.rkt	/^(define list-find-position$/;"	f
list-find-position	littlePython.rkt	/^(define list-find-position$/;"	f
list-find-position	littlePython2.rkt	/^(define list-find-position$/;"	f
list-index	interpretadorClase.rkt	/^(define list-index$/;"	f
list-index	littlePython.rkt	/^(define list-index$/;"	f
list-index	littlePython2.rkt	/^(define list-index$/;"	f
ordenar-evaluate	littlePython.rkt	/^(define ordenar-evaluate (lambda (exp)$/;"	f
primitive-deref	interpretadorClase.rkt	/^(define primitive-deref$/;"	f
primitive-deref	littlePython.rkt	/^(define primitive-deref$/;"	f
primitive-deref	littlePython2.rkt	/^(define primitive-deref$/;"	f
primitive-setref!	interpretadorClase.rkt	/^(define primitive-setref!$/;"	f
primitive-setref!	littlePython.rkt	/^(define primitive-setref!$/;"	f
primitive-setref!	littlePython2.rkt	/^(define primitive-setref!$/;"	f
procval	interpretadorClase.rkt	/^(define-datatype procval procval?$/;"	f
procval	littlePython.rkt	/^(define-datatype procval procval?$/;"	f
procval	littlePython2.rkt	/^(define-datatype procval procval?$/;"	f
programa	interpretadorClase.rkt	/^(define programa (a-program exp-app))$/;"	f
programa	littlePython2.rkt	/^(define programa (a-program exp-app))$/;"	f
reference	interpretadorClase.rkt	/^(define-datatype reference reference?$/;"	f
reference	littlePython.rkt	/^(define-datatype reference reference?$/;"	f
reference	littlePython2.rkt	/^(define-datatype reference reference?$/;"	f
rib-find-position	interpretadorClase.rkt	/^(define rib-find-position $/;"	f
rib-find-position	littlePython.rkt	/^(define rib-find-position $/;"	f
rib-find-position	littlePython2.rkt	/^(define rib-find-position $/;"	f
scan&parse	interpretadorClase.rkt	/^(define scan&parse$/;"	f
scan&parse	littlePython.rkt	/^(define scan&parse$/;"	f
scan&parse	littlePython2.rkt	/^(define scan&parse$/;"	f
scanner-spec-simple-interpreter	interpretadorClase.rkt	/^(define scanner-spec-simple-interpreter$/;"	f
scanner-spec-simple-interpreter	littlePython.rkt	/^(define scanner-spec-simple-interpreter$/;"	f
scanner-spec-simple-interpreter	littlePython2.rkt	/^(define scanner-spec-simple-interpreter$/;"	f
scheme-value?	interpretadorClase.rkt	/^(define scheme-value? (lambda (v) #t))$/;"	f
scheme-value?	littlePython.rkt	/^(define scheme-value? (lambda (v) #t))$/;"	f
scheme-value?	littlePython2.rkt	/^(define scheme-value? (lambda (v) #t))$/;"	f
setref!	interpretadorClase.rkt	/^(define setref!$/;"	f
setref!	littlePython.rkt	/^(define setref!$/;"	f
setref!	littlePython2.rkt	/^(define setref!$/;"	f
show-the-datatypes	interpretadorClase.rkt	/^(define show-the-datatypes$/;"	f
show-the-datatypes	littlePython.rkt	/^(define show-the-datatypes$/;"	f
show-the-datatypes	littlePython2.rkt	/^(define show-the-datatypes$/;"	f
true-value?	interpretadorClase.rkt	/^(define true-value?$/;"	f
true-value?	littlePython.rkt	/^(define true-value?$/;"	f
true-value?	littlePython2.rkt	/^(define true-value?$/;"	f
un-programa-dificil	interpretadorClase.rkt	/^(define un-programa-dificil$/;"	f
un-programa-dificil	littlePython2.rkt	/^(define un-programa-dificil$/;"	f
una-expresion-dificil	interpretadorClase.rkt	/^(define una-expresion-dificil (primapp-exp (mult-prim)$/;"	f
una-expresion-dificil	littlePython2.rkt	/^(define una-expresion-dificil (primapp-exp (mult-prim)$/;"	f
